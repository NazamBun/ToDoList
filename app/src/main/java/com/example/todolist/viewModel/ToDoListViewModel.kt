package com.example.todolist.viewModelimport androidx.lifecycle.ViewModelimport com.example.todolist.model.ToDoimport com.example.todolist.ui.`ui-state`.ToDoListStateimport kotlinx.coroutines.flow.MutableStateFlowimport kotlinx.coroutines.flow.StateFlowimport kotlinx.coroutines.flow.asStateFlowimport kotlinx.coroutines.flow.update// dans cette classe on fait toutes les méthodes qu'il faudra ensuite lier au UIclass ToDoListViewModel : ViewModel() {    //1. avoir le ToDoListState dans val _uiState en privée    private val _uiState = MutableStateFlow(ToDoListState())    //2. avoir référence de ce uistate    var uiState: StateFlow<ToDoListState> = _uiState.asStateFlow()    //3. Méthodes pour modifier les 3 données des UI elements    //TextField    fun textChanged(newValue: String) {        _uiState.update { it.copy(textFieldValue = newValue) }    }    //Percent    fun percentChanged() {        //1. récupérer tous les éléments        val allItems = _uiState.value.items        //2. je veux uniquement la liste filtrée de ceux qui sont true en isDone        val onlyDone = allItems.filter { it.isDone }        //avoir la taille de allItems et onlyDone        val allInt = allItems.size        val doneInt = onlyDone.size        // Calculer le pourcentage        val calc: Double = doneInt.toDouble() / allInt.toDouble()        val percent: Int = (calc * 100).toInt()        //update        _uiState.update { it.copy(percentDone = percent) }    }    //add    fun add() {        if (_uiState.value.textFieldValue != "") {            val newToDo = ToDo(title = _uiState.value.textFieldValue, isDone = false)            _uiState.update { it.copy(items = it.items + newToDo, textFieldValue = "") }        }        percentChanged()    }    //recuperer les todos et les mettre en mutable list    fun convertToMutable(): MutableList<ToDo> {        var list: MutableList<ToDo> = mutableListOf()        list += _uiState.value.items        return list    }    //update Bool    fun updateDone(toDo: ToDo) {        var list = convertToMutable()        var index = list.indexOfFirst { it == toDo }        list.get(index).isDone = !list.get(index).isDone        _uiState.update { it.copy(items = list) }        percentChanged()    }    //Remove    fun delete(toDo: ToDo) {        var list = convertToMutable()        list.remove(toDo)        _uiState.update { it.copy(items = list) }        percentChanged()    }}