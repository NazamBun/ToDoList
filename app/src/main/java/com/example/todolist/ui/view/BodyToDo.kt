package com.example.todolist.ui.viewimport androidx.compose.foundation.layout.Arrangementimport androidx.compose.foundation.layout.Columnimport androidx.compose.foundation.layout.fillMaxSizeimport androidx.compose.foundation.layout.fillMaxWidthimport androidx.compose.foundation.layout.paddingimport androidx.compose.foundation.lazy.LazyColumnimport androidx.compose.foundation.lazy.itemsimport androidx.compose.material.icons.Iconsimport androidx.compose.material.icons.filled.Sendimport androidx.compose.material3.Dividerimport androidx.compose.material3.ExperimentalMaterial3Apiimport androidx.compose.material3.Iconimport androidx.compose.material3.IconButtonimport androidx.compose.material3.IconButtonColorsimport androidx.compose.material3.OutlinedTextFieldimport androidx.compose.material3.Surfaceimport androidx.compose.material3.Textimport androidx.compose.runtime.Composableimport androidx.compose.runtime.collectAsStateimport androidx.compose.runtime.getValueimport androidx.compose.ui.Alignmentimport androidx.compose.ui.Modifierimport androidx.compose.ui.unit.dpimport androidx.lifecycle.viewmodel.compose.viewModelimport com.example.todolist.model.ToDoimport com.example.todolist.viewModel.ToDoListViewModel@Composablefun BodyToDo(modifier: Modifier, vm: ToDoListViewModel = viewModel()) {    val state by vm.uiState.collectAsState()    Column(        modifier            .padding(8.dp)            .fillMaxSize(),        horizontalAlignment = Alignment.CenterHorizontally,        verticalArrangement = Arrangement.spacedBy(10.dp)    ) {        Surface(modifier = Modifier.fillMaxWidth()) {            OutlinedTextField(                value = state.textFieldValue,                onValueChange = {newValue -> vm.textChanged(newValue)},                label = { Text(text = "Nouveau ToDo") },                trailingIcon = {                    IconButton(onClick = { vm.add()}) {                        Icon(imageVector = Icons.Default.Send, contentDescription = null)                    }                }            )        }        Divider()        Text(text = "Pourcentage effectuÃ©: ${state.percentDone}%")        Divider()        if (state.items.isEmpty()) {            Text(text = "Rien pour le moment")        } else {            LazyColumn(modifier = Modifier.fillMaxSize()) {                items(state.items) { toDo ->                    ToDoItem(                        toDo = toDo,                        onDoneChanged = {vm.updateDone(toDo)},                        onDelete = {vm.delete(toDo)}                    )                }            }        }    }}